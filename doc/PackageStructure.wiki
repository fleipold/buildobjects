= Package Structure =

buildobjects is structured into mupltiple packages.In the `artifacts` package there is a number of classes that define different artificats. Artifacts are mainly [http://code.google.com/p/buildobjects/source/browse/trunk/core/src/org/buildobjects/artifacts/Sources.java Sources] and [http://code.google.com/p/buildobjects/source/browse/trunk/core/src/org/buildobjects/artifacts/Classes.java Classes], which are representing filesystem like tree structures. The common aspect of `Sources` and `Classes` are abstracted in `Resources`. There are several implementations, e.g. classes in a directory structure, classes in a jar file or classes in an in-memory structure.

The `compiler` package is providing a wrapper around the newly introduced java compiler API (hence it needs java6) using the concepts from the `artifacts` package. 

On top of that the `tasks` package has a collection of Tasks that are the basic abstraction for a functional defintion of your build. A task being something like a function-object that can be fully wired up, before actually doing any work.

It is expected that projects build their own abstractions on top of these tasks pretty much like [http://code.google.com/p/buildobjects/source/browse/trunk/core/src/org/buildobjects/projectmodel/JavaModule.java JavaModel], which provides a reusable default implementation for a module build. Another example of such an abstraction ist the [http://code.google.com/p/buildobjects/source/browse/trunk/core/src/org/buildobjects/projectmodel/Libraries.java LIbraries] class which provides a type safe way of expressing dependencies to external libraries.

The `tasklet` package provides a [Tasklet] runner, that allows to run small java programs form the command line. This way you don't have to compile your buildfile to build your project.